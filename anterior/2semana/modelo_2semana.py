# -*- coding: utf-8 -*-
from __future__ import print_function, division
"""transfer-learning-example.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fjaTzK5gJg7qKwBf5TepTD4Mgvqf7alp

Importar o Dataset da pasta no Google Drive
"""
""""
from google.colab import drive
drive.mount('/content/drive')
"""

"""Importar libs, etc..."""


import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
from torchvision.datasets import HMDB51
from torch.utils.data import Dataset, DataLoader
import matplotlib.pyplot as plt
import av
import time
import os
from tqdm import tqdm
from frame_dataset import FrameDataset
import copy

plt.ion()   # interactive mode

hmdb_data_dir = "/home/jrola/PycharmProjects/pytorch_CTM/hmdb51_org"
hmdb_label_dir = "/home/jrola/PycharmProjects/pytorch_CTM/testTrainMulti_7030_splits"
hmdb_frames_dir = "/home/jrola/PycharmProjects/pytorch_CTM/hmdb51_frames_par"
train_labels = "/home/jrola/PycharmProjects/pytorch_CTM/hmdb4_labels80.csv"
test_labels = "/home/jrola/PycharmProjects/pytorch_CTM/hmdb4_labels20.csv"
frames_per_clip = 5
step_between_clips = 5  # trocar
batch_size = 32

transform = transforms.Compose([
            # TODO: this should be done by a video-level transform when PyTorch provides transforms.ToTensor() for video
            # scale in [0, 1] of type float
            #transforms.Lambda(lambda x: x / 255.),
            # reshape into (T, C, H, W) for easier convolutions, ver se a ordem está correta
            #transforms.Lambda(lambda x: x.permute(0, 3, 1, 2)),
            # rescale to the most common size
            #transforms.Lambda(lambda x: nn.functional.interpolate(x, (240, 320))),

            transforms.Resize(256),
            #transforms.RandomCrop(256,256), # TODO: trocar isto para ter consistência, ver metodo shape ou size, tem de dar 3, D, H, W
            transforms.ToTensor(),
            transforms.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
])

"""
def custom_collate(batch):
    filtered_batch = []
    for video, _, label in batch:
        filtered_batch.append((video, label))
    return torch.utils.data.dataloader.default_collate(filtered_batch)
"""

# create train loader (allowing batches and other extras)
#train_dataset = HMDB51(hmdb_data_dir, hmdb_label_dir, frames_per_clip=frames_per_clip, step_between_clips=step_between_clips, train=True, transform=tfs)
train_dataset = FrameDataset(
    csv_file=train_labels,
    root_dir=hmdb_frames_dir,
    transform=transform,
)
train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)

# create test loader (allowing batches and other extras)
#test_dataset =  HMDB51(hmdb_data_dir, hmdb_label_dir, frames_per_clip=frames_per_clip, step_between_clips=step_between_clips, train=False, transform=tfs)
test_dataset = FrameDataset(
    csv_file=test_labels,
    root_dir=hmdb_frames_dir,
    transform=transform,
)
test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=True)

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

"""Definir o modelo da Network"""

# model_ft = models.resnet18(pretrained=True)
model_ft = models.video.r3d_18(pretrained=True)

num_ftrs = model_ft.fc.in_features
# Here the size of each output sample is set to 2.
# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).
model_ft.fc = nn.Linear(num_ftrs, 51)

model_ft = model_ft.to(device)

criterion = nn.CrossEntropyLoss()

# Observe that all parameters are being optimized
optimizer_ft = optim.Adam(model_ft.parameters(), lr=0.001)
#optimizer_ft = optim.Adam([var1, var2], lr=0.0001)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)


"""função de treino do modelo"""

# Train Network
num_epochs = 4
for epoch in range(num_epochs):
    for batch_idx, (data, targets) in enumerate(tqdm(train_loader)):
        # Get data to cuda if possible
        data = data.to(device=device)
        targets = targets.to(device=device)

        # forward
        scores = model_ft(data)
        loss = criterion(scores, targets)

        # backward
        optimizer_ft.zero_grad()
        loss.backward()

        # gradient descent or adam step
        optimizer_ft.step()

# Check accuracy on training & test to see how good our model
def check_accuracy(loader, model):
    num_correct = 0
    num_samples = 0
    model.eval()

    with torch.no_grad():
        for x, y in loader:
            x = x.to(device=device)
            y = y.to(device=device)

            scores = model(x)
            _, predictions = scores.max(1)
            num_correct += (predictions == y).sum()
            num_samples += predictions.size(0)
